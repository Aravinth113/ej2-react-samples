{"index.css":"","systemjs.config.js":"System.config({\r\n    transpiler: \"ts\",\r\n    typescriptOptions: {\r\n            target: \"es5\",\r\n            module: \"commonjs\",\r\n            moduleResolution: \"node\",\r\n            emitDecoratorMetadata: true,\r\n            experimentalDecorators: true,\r\n            \"jsx\": \"react\"\r\n    },\r\n     meta: {\r\n      'typescript': {\r\n        \"exports\": \"ts\"\r\n      },\r\n      '*.json': { loader: 'plugin-json' }\r\n    },\r\n    paths: {\r\n        \"syncfusion:\": \"http://cdn.syncfusion.com/ej2/\"},\r\n    map: {\r\n        app: 'app',\r\n        ts: \"https://unpkg.com/plugin-typescript@4.0.10/lib/plugin.js\",\r\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\r\n        \"plugin-json\":\"https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js\",\r\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\r\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\r\n        \"@syncfusion/ej2-splitbuttons\": \"syncfusion:ej2-splitbuttons/dist/ej2-splitbuttons.umd.min.js\",\r\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\r\n        \"@syncfusion/ej2-maps\": \"syncfusion:ej2-maps/dist/ej2-maps.umd.min.js\",\r\n        \"@syncfusion/ej2-treemap\": \"syncfusion:ej2-treemap/dist/ej2-treemap.umd.min.js\",\r\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\r\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\r\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\r\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",\r\n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\r\n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",\r\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",\r\n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\r\n        \"@syncfusion/ej2-schedule\": \"syncfusion:ej2-schedule/dist/ej2-schedule.umd.min.js\",\r\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",        \r\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\r\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",        \r\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\",\r\n        \"@syncfusion/ej2-documenteditor\": \"syncfusion:ej2-documenteditor/dist/ej2-documenteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-notifications\": \"syncfusion:ej2-notifications/dist/ej2-notifications.umd.min.js\",\r\n        \"@syncfusion/ej2-richtexteditor\": \"syncfusion:ej2-richtexteditor/dist/ej2-richtexteditor.umd.min.js\",\r\n\t\t\"@syncfusion/ej2-svg-base\": \"syncfusion:ej2-svg-base/dist/ej2-svg-base.umd.min.js\",\r\n        \"@syncfusion/ej2-pivotview\": \"syncfusion:ej2-pivotview/dist/ej2-pivotview.umd.min.js\",\r\n        \"@syncfusion/ej2-heatmap\": \"syncfusion:ej2-heatmap/dist/ej2-heatmap.umd.min.js\",\r\n        \"@syncfusion/ej2-spreadsheet\": \"syncfusion:ej2-spreadsheet/dist/ej2-spreadsheet.umd.min.js\",\r\n        \"@syncfusion/ej2-react-base\": \"syncfusion:ej2-react-base/dist/ej2-react-base.umd.min.js\",\r\n        \"@syncfusion/ej2-react-buttons\": \"syncfusion:ej2-react-buttons/dist/ej2-react-buttons.umd.min.js\",\r\n        \"@syncfusion/ej2-react-splitbuttons\": \"syncfusion:ej2-react-splitbuttons/dist/ej2-react-splitbuttons.umd.min.js\",\r\n        \"@syncfusion/ej2-react-charts\": \"syncfusion:ej2-react-charts/dist/ej2-react-charts.umd.min.js\",\r\n        \"@syncfusion/ej2-react-maps\": \"syncfusion:ej2-react-maps/dist/ej2-react-maps.umd.min.js\",\r\n        \"@syncfusion/ej2-react-treemap\": \"syncfusion:ej2-react-treemap/dist/ej2-react-treemap.umd.min.js\",\r\n        \"@syncfusion/ej2-react-circulargauge\": \"syncfusion:ej2-react-circulargauge/dist/ej2-react-circulargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-react-lineargauge\": \"syncfusion:ej2-react-lineargauge/dist/ej2-react-lineargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-react-calendars\": \"syncfusion:ej2-react-calendars/dist/ej2-react-calendars.umd.min.js\",\r\n        \"@syncfusion/ej2-react-dropdowns\": \"syncfusion:ej2-react-dropdowns/dist/ej2-react-dropdowns.umd.min.js\",\r\n        \"@syncfusion/ej2-react-grids\": \"syncfusion:ej2-react-grids/dist/ej2-react-grids.umd.min.js\",\r\n        \"@syncfusion/ej2-react-inputs\": \"syncfusion:ej2-react-inputs/dist/ej2-react-inputs.umd.min.js\",\r\n        \"@syncfusion/ej2-react-lists\": \"syncfusion:ej2-react-lists/dist/ej2-react-lists.umd.min.js\",\r\n        \"@syncfusion/ej2-react-navigations\": \"syncfusion:ej2-react-navigations/dist/ej2-react-navigations.umd.min.js\",\r\n        \"@syncfusion/ej2-react-popups\": \"syncfusion:ej2-react-popups/dist/ej2-react-popups.umd.min.js\",\r\n        \"@syncfusion/ej2-react-schedule\": \"syncfusion:ej2-react-schedule/dist/ej2-react-schedule.umd.min.js\",\r\n        \"@syncfusion/ej2-react-documenteditor\": \"syncfusion:ej2-react-documenteditor/dist/ej2-react-documenteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-react-notifications\": \"syncfusion:ej2-react-notifications/dist/ej2-react-notifications.umd.min.js\",\r\n        \"@syncfusion/ej2-react-richtexteditor\": \"syncfusion:ej2-react-richtexteditor/dist/ej2-react-richtexteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-react-pivotview\": \"syncfusion:ej2-react-pivotview/dist/ej2-react-pivotview.umd.min.js\",\r\n        \"@syncfusion/ej2-react-heatmap\": \"syncfusion:ej2-react-heatmap/dist/ej2-react-heatmap.umd.min.js\",\r\n        \"@syncfusion/ej2-react-spreadsheet\": \"syncfusion:ej2-react-spreadsheet/dist/ej2-react-spreadsheet.umd.min.js\",\r\n        \"react-dom\":\"https://unpkg.com/react-dom@15.5.4/dist/react-dom.min.js\",\r\n        \"react\":\"https://unpkg.com/react@15.5.4/dist/react.min.js\",\r\n    },\r\n    packages: {\r\n        'app': { main: 'index', defaultExtension: 'tsx' },\r\n    }\r\n});\r\n\r\nSystem.import('app');","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>{{:title}}</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"{{:meta}}\">    \r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link rel=\"shortcut icon\" href=\"https://ej2.syncfusion.com/home/favicon.ico\" />\r\n    <script type=\"text/javascript\">\r\n        var themeName = location.hash || 'material';\r\n        themeName = themeName.replace('#','');\r\n        window.ripple = (themeName === \"material\")\r\n        document.write('<link href=\"http://cdn.syncfusion.com/ej2/' + themeName + '.css\" rel=\"stylesheet\">');\r\n    </script>\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n    <link rel=\"canonical\" href=\"https://ej2.syncfusion.com/react/demos/{{:canonical}}\"/>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\r\n    <link href=\"index.css\" rel=\"stylesheet\" />\r\n     <style>\r\n        #loader {\r\n            color: #008cff;\r\n            height: 40px;\r\n            left: 45%;\r\n            position: absolute;\r\n            top: 45%;\r\n            width: 30%;\r\n        }\r\n        body {\r\n            touch-action:none;\r\n        }\r\n        .body {\r\n            font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n        }\r\n\r\n        .e-view {\r\n            bottom: 0;\r\n            left: 0;\r\n            overflow: hidden;\r\n            position: absolute;\r\n            right: 0;\r\n            top: 0;\r\n        }\r\n\r\n        .sb-left {\r\n            float: left;\r\n        }\r\n\r\n        .sb-right {\r\n            float: right;\r\n        }\r\n\r\n        .sb-block {\r\n            display: block;\r\n        }\r\n\r\n        .sb-table {\r\n            display: table;\r\n        }\r\n\r\n        .sb-table-cell {\r\n            display: table-cell;\r\n            vertical-align: middle;\r\n        }\r\n\r\n        /*sample header*/\r\n\r\n\r\n        .sb-header {\r\n            height: 48px;\r\n            background: #FFFFFF;\r\n            box-shadow: 0 2px 4px 0 rgba(0,0,0,0.12);\r\n            z-index: 1001;\r\n            opacity: 100;\r\n        }\r\n\r\n\r\n        .sb-header-left, .sb-header-right {\r\n            height: 100%;\r\n        }\r\n\r\n        #sb-header-text {\r\n            padding-left: 22px;\r\n            opacity: 0.87;\r\n            font-family: Roboto;\r\n            font-weight: 500;\r\n            font-size: 15px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n        .header-logo {\r\n            float: left;\r\n            padding-left: 8px;\r\n            padding-right: 22px;\r\n        }\r\n\r\n        .footer-logo {\r\n            background: url(https://ej2.syncfusion.com/home/images/footer-logo.svg) no-repeat right;\r\n            height: 40px;\r\n            width: 140px;\r\n        }\r\n\r\n        .sb-header-splitter {\r\n            float: left;\r\n            border-left: 1px solid rgb(196, 196, 196);\r\n            height: 32px;\r\n            margin-top: 8px;\r\n            padding-left: 22 px;\r\n        }\r\n\r\n        .sb-header-settings {\r\n            display: none;\r\n        }\r\n\r\n        .product-style a{\r\n        padding-right: 15px;\r\n        font-family:Roboto;\r\n        font-weight: 500;\r\n        font-size: 13px;\r\n        color: #363636;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        }\r\n        .product-style a:hover {\r\n            color:#3C78EF;\r\n        }\r\n\r\n        .sb-download-btn a {\r\n            text-decoration: none;\r\n        }\r\n\r\n        .sb-download-text {\r\n            color: #FFFFFF;\r\n        }\r\n\r\n        .sb-download-wrapper {\r\n            padding-right: 27px;\r\n        }\r\n\r\n        .sb-download-btn:hover .sb-download-btn:focus .sb-download-btn.active {\r\n            border-radius: 2px;\r\n            font-family: \"Roboto\";\r\n            font-weight: bold;\r\n            color: #FFFFFF;\r\n        }\r\n\r\n        .sb-download-btn:hover {\r\n            background: #006CE6;\r\n        }\r\n\r\n        .sb-download-btn:focus {\r\n            background: #0051CB;\r\n        }\r\n\r\n        .sb-download-btn.active {\r\n            background: #0036B1;\r\n        }\r\n\r\n        .sb-download-btn {\r\n            background-color: #3C78EF;\r\n            opacity: 100;\r\n            border-radius: 2px;\r\n            font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n            font-weight: 500;\r\n            line-height: 18px;\r\n            height: 32px;\r\n            border-color: transparent;\r\n        }\r\n\r\n        .sb-bread-crumb  h1{\r\n            padding-left: 20px;\r\n            padding-top: 24px;\r\n            padding-bottom: 10px;\r\n            margin: 0;\r\n        }\r\n\r\n        .category-allcontrols a, .category-text a, .crumb-sample {\r\n            display: table;\r\n            opacity: 0.87;\r\n            font-family: Roboto;\r\n            font-weight: 500;\r\n            font-size: 15px;\r\n            color: #3C78EF;\r\n            text-align: left;\r\n            text-decoration: none;\r\n        }\r\n\r\n        .sb-bread-crumb .sb-bread-crumb-text>div {\r\n            font-size: 15px;\r\n            font-weight: 500;\r\n            padding-right: 8px;\r\n            cursor: default;\r\n            display: table-cell;\r\n        }\r\n\r\n        .sb-bread-crumb-text>div.seperator {\r\n            font-weight: 700;\r\n            font-size: 15px;\r\n            vertical-align: bottom;\r\n        } \r\n\r\n        .content {\r\n        overflow: auto;\r\n        height: calc(100% - 50px);\r\n        top: 50px;\r\n        }\r\n\r\n\r\n        .sample-content {\r\n            top: 48px;\r\n            background: #FFFFFF;\r\n        }\r\n\r\n        .div {\r\n        display: block;\r\n        }\r\n\r\n        .control-section {\r\n            padding-left: 4px;\r\n        }\r\n\r\n        .crumb-sample {\r\n            color: #000000;\r\n            line-height: 18px;\r\n        }\r\n\r\n        #description {\r\n            padding-bottom: 16px;\r\n            padding-left: 20px;\r\n            opacity: 0.75;\r\n            font-family: Roboto;\r\n            font-size: 13px;\r\n            color: #000000;\r\n            text-align: left;\r\n            padding-top: 14px;\r\n        }\r\n\r\n        #action-description {\r\n            padding-left: 20px;\r\n            padding-bottom: 15px;\r\n            font-family: Roboto;\r\n            font-size: 13px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n        #description-section {\r\n            padding-left: 20px;\r\n            padding-top: 30px;\r\n            opacity: 0.87;\r\n            font-family:Roboto;\r\n            font-weight: 700;\r\n            font-size: 15px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n        .layout {\r\n            display:inline-block;\r\n            cursor: pointer;\r\n        }\r\n        #actionDes {\r\n            opacity: 0.75;\r\n        }\r\n/*sb-icons declaration*/\r\n\r\n@font-face {\r\n    font-family: 'sbicons';\r\n      src: url(data:font/truetype;charset=utf-8;base64,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) format('truetype');\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n.sb-icons {\r\n    font-family: 'sbicons';\r\n    speak: none;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-variant: normal;\r\n    text-transform: none;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n.sb-icon-Next:before {\r\n    content: '\\e91b';\r\n}\r\n\r\n.sb-icon-Previous:before {\r\n    content: '\\e91f';\r\n}\r\n\r\n#next-sample,\r\n#prev-sample {\r\n    font-size: 18px;\r\n    border: 0.5px solid#E5E5E5;\r\n    background: #FFFFFF;\r\n    display: inline-table;\r\n    padding: 2px 5px 0px 5px;\r\n}\r\n\r\n.sb-navigation-next a, .sb-navigation-prev a{\r\n    color: #636363;\r\n    text-decoration: none;\r\n}\r\n\r\n#prev-sample {\r\n    border-radius: 4px 0px 0px 4px;\r\n}\r\n\r\n#next-sample {\r\n    border-radius: 0px 4px 4px 0px;\r\n    float: right;\r\n}\r\n\r\n#next-sample:hover,\r\n#prev-sample:hover{\r\nbackground-color: #D8D8D8;\r\ntext-decoration: none; \r\n}\r\n\r\n.sb-sample-navigation {\r\n    font-size: 18px;\r\n    color: #5a5a5a;\r\n    cursor: pointer;\r\n}\r\n\r\n.sb-custom-item {\r\n    padding-right: 15px;\r\n    padding-left: 30px;\r\n    display: inline-table;\r\n    padding-top: 20px;\r\n}\r\n\r\na.e-disabled {\r\n    cursor: not-allowed;\r\n    opacity: 0.35;\r\n}\r\n\r\n\r\n@media (max-width: 550px) {\r\n        \r\n        .sb-headers {\r\n            height: 48px;\r\n            background: #FFFFFF;\r\n            box-shadow: 0 2px 4px 0 rgba(0,0,0,0.12);\r\n            z-index: 1001;\r\n            opacity: 100;\r\n        }\r\n        .sb-header {\r\n            display: none;\r\n        }\r\n        .syncfusion-logo {\r\n            float: left;\r\n            padding-left: 8px;\r\n            padding-right: 8px;\r\n        }\r\n        .sync-logo {\r\n            padding-right: 0px;\r\n            padding-left: 8px;\r\n            background: url(../../styles/images/SyncfusionLogo.svg) no-repeat right;\r\n            height: 40px;\r\n            width: 40px;\r\n        }\r\n        .sb-icon-notification {\r\n            padding-left: 15px;\r\n            padding-right: 15px;\r\n            font-size: 18px;\r\n            transform: rotate(-180deg);\r\n            color: #5D5D5D;\r\n            opacity: 100%;\r\n        }\r\n        #sb-header-text {\r\n            padding-left: 0%;\r\n        }\r\n    \r\n        .sb-icon-notification:before {\r\n            content: \"\\ea08\";\r\n        }\r\n    \r\n        .product a:hover{\r\n        color: #5D5D5D;\r\n        text-decoration: none;\r\n    }\r\n}\r\n\r\n    </style>\r\n</head>\r\n\r\n<body class='e-view ej2-new' aria-busy=\"true\">\r\n        <div class=\"sample-browser\">\r\n            <div id='sample-header' class=\"sb-header\" role=\"banner\">\r\n                <div class='sb-header-left sb-left sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"header-logo\">\r\n                            <a href=\"https://ej2.syncfusion.com/home/react.html\" target=\"\" rel=\"noopener noreferrer\">\r\n                                <div class=\"footer-logo\"> </div>\r\n                            </a>\r\n                        </div>\r\n    \r\n                    </div>\r\n                    <div class=\"sb-header-splitter sb-download-splitter\"></div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div id='sb-header-text' class='e-sb-header-text'>\r\n    \r\n                            <span class='sb-header-text-left'>Essential JS 2 for React</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class='sb-header-right sb-right sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class='product-style'>\r\n                            <div><a href=\"https://www.syncfusion.com/react-ui-components/{{:header2}}\">PRODUCT TOUR</a></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"sb-header-item sb-table-cell sb-download-wrapper\">\r\n                            <a href=\"https://www.syncfusion.com/downloads/react\" target=\"_blank\">\r\n                                <button id=\"download-now\" class=\"sb-download-btn\">\r\n                                    <span class=\"sb-download-text\">DOWNLOAD</span>\r\n                                </button>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    \r\n            </div>\r\n            <div id='sample-header' class=\"sb-headers\" role=\"banner\">\r\n                <div class='sb-header-left sb-left sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"syncfusion-logo\">\r\n                            <a href=\"https://ej2.syncfusion.com/home/react.html\" target=\"\" rel=\"noopener noreferrer\">\r\n                                <div class=\"sync-logo\"></div>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div id='sb-header-text' class='e-sb-header-text'>\r\n                            <span class='sb-header-text-left'>Essential JS 2 for React</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                    <div class='sb-header-right sb-right sb-table'>\r\n                        <div class='sb-header-item sb-table-cell'>\r\n                            <div class=\"product\">\r\n                                <a href=\"https://www.syncfusion.com/react-ui-components/{{:header2}}\">\r\n                                <div class=\"sb-icon-notification sb-icons\"></div>\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n    \r\n            <div class ='content e-view'>\r\n            <div class='sample-content'>\r\n                <div id=\"sample-bread-crumb\" class=\"sb-bread-crumb\">\r\n                            <div class=\"sb-custom-item sb-sample-navigation sb-right sb-header-right sb-table-cell\">\r\n                                <div id=\"prev-sample\" class=\"sb-navigation-prev e-control e-tooltip \" aria-label=\"previous sample\" title=\"Previous Sample\">\r\n                                    <a {{:anchor-prev}} class='{{:disabled-prev}}'><span class=\"sb-icons sb-icon-Previous\"></span></a>\r\n                            \r\n                                </div>\r\n                                <div id=\"next-sample\" class=\"sb-navigation-next e-control e-tooltip\" aria-label=\"next sample\" title=\"Next Sample\">\r\n                                    <a {{:anchor-next}} class='{{:disabled-next}}'><span class=\"sb-icons sb-icon-Next\"></span></a>\r\n                            \r\n                                </div>\r\n                            </div>\r\n                    <h1 class=\"sb-bread-crumb-text\">\r\n                        <div class=\"category-allcontrols\"><a href=\"https://ej2.syncfusion.com/react/demos/\"><span>All Controls</span></a></div>\r\n                        <div class=\"category-seperator sb-icons\"> / </div>\r\n                        <div class=\"category-text bread-ctext\"><a href=\"https://ej2.syncfusion.com/react/demos/#/material/{{:header2}}/default.html\"><span>{{:header}}</span></a></div>\r\n                        <div class=\"category-seperator sb-icons\"> / </div>\r\n                        <div class=\"crumb-sample\">{{:header1}}</div>\r\n                    </h1>\r\n                </div>\r\n                <div class=\"control-content\">\r\n                <div id=\"action-description\">\r\n                        <p>\r\n                            <div class=\"layout\" id=\"actionDes\">{{:action-description}}</div>\r\n                            <a id=\"details\" class=\"layout\" onclick=\"desDetails()\"> More Details...</a>\r\n                            <script>\r\n                                function desDetails() {\r\n                                    var element = document.getElementById('description-section');\r\n                                    if (element) {\r\n                                        element.scrollIntoView();\r\n                                    }\r\n                                }\r\n                            </script>\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"container-fluid\">\r\n                        <div class=\"control-section\">\r\n                            <div id='sample'>\r\n                                <div id='loader'>Loading....</div>\r\n                            </div>\r\n                    \r\n                        </div>\r\n                    </div>\r\n                    <div id=\"description-section\">Description</div>    \r\n                    <div id=\"description\">\r\n                        <p>\r\n                           {{:description}}\r\n                         </p>     \r\n                    </div>    \r\n                </div>             \r\n            </div>\r\n                \r\n            </div>\r\n        </div>\r\n        <script src=\"./app/index.min.js\"></script>\r\n        <script src=\"../../{{:repoScript}}\"></script> \r\n\r\n</body>\r\n</html>\r\n","app/index.tsx":"import * as ReactDOM from 'react-dom';\r\nimport * as React from 'react';\r\n\r\nimport {\r\n  DiagramComponent,\r\n  NodeModel,\r\n  randomId,\r\n  ConnectorModel,\r\n  Connector,\r\n  NodeConstraints,\r\n  HierarchicalTree,\r\n  DataBinding,SnapConstraints,\r\n  Inject,\r\n  Node,\r\n  ISelectionChangeEventArgs,\r\n  IEndChangeEventArgs\r\n} from '@syncfusion/ej2-react-diagrams';\r\nimport { SampleBase } from './sample-base';\r\nimport {\r\n  ToolbarComponent,\r\n  ClickEventArgs\r\n} from '@syncfusion/ej2-react-navigations';\r\nimport { DialogComponent } from '@syncfusion/ej2-react-popups';\r\nimport {\r\n  DropDownListComponent,\r\n  ChangeEventArgs\r\n} from '@syncfusion/ej2-react-dropdowns';\r\nimport { TextBoxComponent } from '@syncfusion/ej2-react-inputs';\r\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\r\n\r\nlet diagramInstance: DiagramComponent;\r\nlet dialogInstance: DialogComponent;\r\nlet toolbarObj: ToolbarComponent;\r\nlet sourceID: string;\r\nlet targetID: string;\r\nlet sourceDropdown: DropDownListComponent;\r\nlet targetDropdown: DropDownListComponent;\r\n\r\nlet nodeData: { [key: string]: Object }[] = [];\r\n\r\ninterface DataInfo {\r\n  Description: string;\r\n  Color: string;\r\n  Id: number;\r\n}\r\n\r\nexport class Crud extends SampleBase<{}, {}> {\r\n  private buttons;\r\n  private fields: object = { text: 'Label', value: 'Name' };\r\n  public content(data: any): JSX.Element {\r\n    return (\r\n      <div>\r\n        <div className='showLabel'>\r\n        <TextBoxComponent id='Description' floatLabelType={'Always'} placeholder={'Description'} />\r\n        </div>\r\n        <div className='showLabel' style={{ paddingTop: '14px' }}>\r\n        <TextBoxComponent id='Color' floatLabelType={'Always'} placeholder={'Color'}/>\r\n        </div>\r\n        <div className='showDropdown'>\r\n        <DropDownListComponent\r\n          id='SourceId'\r\n          ref={dropdown => (sourceDropdown = dropdown)}\r\n          change={(args: ChangeEventArgs) => {\r\n            sourceID = args.value as string;\r\n          }}\r\n          created={(args: Event) => {\r\n            sourceDropdown.fields={ text: 'Label', value: 'Name' };\r\n            sourceDropdown.dataSource= getDataSource();\r\n            sourceDropdown.dataBind();\r\n          }}\r\n        />\r\n        </div>\r\n        <div className='showDropdown' style={{ paddingTop: '14px' }}>\r\n        <DropDownListComponent\r\n          id='TargetId'\r\n          ref={dropdown => (targetDropdown = dropdown)}\r\n          change={(args: ChangeEventArgs) => {\r\n            targetID = args.value as string;\r\n          }}\r\n          created={(args: Event) => {\r\n            targetDropdown.fields={ text: 'Label', value: 'Name' };\r\n            targetDropdown.dataSource= getDataSource();\r\n            targetDropdown.dataBind();\r\n          }}\r\n        />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  constructor(props) {\r\n    super();\r\n    this.buttons = [{\r\n      click: this.dlgButtonClick,\r\n      buttonModel: {\r\n          content: 'Update',\r\n          isPrimary: true\r\n      }\r\n  }];\r\n  }\r\n\r\n  // custom code start\r\n  private dlgButtonClick(): void {\r\n    let dialogHeader: string | HTMLElement  = dialogInstance.header;\r\n    let description: string = (document.getElementById('Description') as HTMLInputElement).value;\r\n    let color: string = (document.getElementById('Color') as HTMLInputElement).value;\r\n    let selectedItem: NodeModel | ConnectorModel;\r\n    if (diagramInstance.selectedItems.nodes.length > 0) {\r\n      selectedItem = diagramInstance.selectedItems.nodes[0];\r\n    }\r\n    if (diagramInstance.selectedItems.connectors.length > 0) {\r\n      selectedItem = diagramInstance.selectedItems.connectors[0];\r\n    }\r\n    if (dialogHeader === 'Add') {\r\n      let node: NodeModel | DataInfo = {\r\n        id: 'node' + randomId(),\r\n        style: { fill: color },\r\n        Description: description,\r\n        Color: color,\r\n        Id: Math.floor(Math.random() * 1000 + 100)\r\n      };\r\n      let connector: ConnectorModel | DataInfo = {\r\n        id: 'connector' + randomId(),\r\n        sourceID: selectedItem.id,\r\n        targetID: (node as Node).id,\r\n        Id: Math.floor(Math.random() * 1000 + 100)\r\n      };\r\n      diagramInstance.add(node as NodeModel);\r\n      diagramInstance.add(connector as ConnectorModel);\r\n      diagramInstance.doLayout();\r\n      diagramInstance.insertData();\r\n      nodeData.push({ Name: (node as Node).id, Label: description });\r\n      sourceDropdown.dataSource = getDataSource();\r\n      sourceDropdown.dataBind();\r\n      targetDropdown.dataSource = getDataSource();\r\n      targetDropdown.dataBind();\r\n    } else {\r\n      if (selectedItem instanceof Connector) {\r\n        selectedItem.sourceID = sourceID ? sourceID : selectedItem.sourceID;\r\n        selectedItem.targetID = targetID ? targetID : selectedItem.targetID;\r\n        diagramInstance.dataBind();\r\n        diagramInstance.doLayout();\r\n      } else {\r\n        (selectedItem as DataInfo).Description = description;\r\n        (selectedItem as DataInfo).Color = color;\r\n        selectedItem.annotations[0].content = description;\r\n        selectedItem.style.fill = color;\r\n        diagramInstance.dataBind();\r\n      }\r\n      diagramInstance.updateData();\r\n    }\r\n    dialogInstance.hide();\r\n  }\r\n  // custom code end\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div>\r\n      <div className='control-section'>\r\n        <div style= {{width: '100%', height: '10%'}}>\r\n          <ToolbarComponent\r\n            id='toolbar_diagram'\r\n            ref={toolbar => (toolbarObj = toolbar)}\r\n            items={[\r\n              {\r\n                tooltipText: 'Add',\r\n                prefixIcon: 'e-ddb-crudicons e-add',\r\n                id: 'Add',\r\n                text: 'Add'\r\n              },\r\n              {\r\n                type: 'Separator'\r\n              },\r\n              {\r\n                tooltipText: 'Edit',\r\n                prefixIcon: 'e-ddb-crudicons e-update',\r\n                id: 'Edit',\r\n                text: 'Edit'\r\n              },\r\n              {\r\n                type: 'Separator'\r\n              },\r\n              {\r\n                tooltipText: 'Delete',\r\n                prefixIcon: 'e-ddb-crudicons e-delete',\r\n                id: 'Delete',\r\n                text: 'Delete'\r\n              }\r\n            ]}\r\n            clicked={(args: ClickEventArgs) => {\r\n              let selectedItem: NodeModel | ConnectorModel;\r\n              if (diagramInstance.selectedItems.nodes.length > 0) {\r\n                selectedItem = diagramInstance.selectedItems.nodes[0];\r\n              }\r\n              if (diagramInstance.selectedItems.connectors.length > 0) {\r\n                selectedItem = diagramInstance.selectedItems.connectors[0];\r\n              }\r\n              if (selectedItem) {\r\n                switch (args.item.tooltipText) {\r\n                  case 'Add':\r\n                    openDialog('Add', '', '', true);\r\n                    break;\r\n                  case 'Edit':\r\n                    if (selectedItem instanceof Connector) {\r\n                      let sourceNode: NodeModel = diagramInstance.getObject(selectedItem.sourceID);\r\n                      let targetNode: NodeModel = diagramInstance.getObject(selectedItem.targetID);\r\n                      openDialog('Edit', (sourceNode as DataInfo).Description, (targetNode as DataInfo).Description, false );\r\n                    } else {\r\n                      openDialog('Edit', (selectedItem as DataInfo).Description, (selectedItem as DataInfo).Color, true );\r\n                    }\r\n                    break;\r\n                  case 'Delete':\r\n                    diagramInstance.remove(selectedItem);\r\n                    diagramInstance.doLayout();\r\n                    diagramInstance.removeData();\r\n                    let element: object = { Name: selectedItem.id, Label: (selectedItem as DataInfo).Description };\r\n                    let index: number = nodeData.indexOf(element as { [key: string]: Object;});\r\n                    nodeData.splice(index, 1);\r\n                    sourceDropdown.dataSource = getDataSource();\r\n                    sourceDropdown.dataBind();\r\n                    targetDropdown.dataSource = getDataSource();\r\n                    targetDropdown.dataBind();\r\n                }\r\n              }\r\n            }}\r\n            created={(args: Event) => {\r\n              enableToolbarItems(false);\r\n            }}\r\n          />\r\n        </div>\r\n        <div style= {{width: '100%', height: '80%', borderWidth: '0 1px 1px 1px', borderStyle: 'solid', borderColor:'#D7D7D7'}}>\r\n        <div id='diagram-space' className='sb-mobile-diagram'>\r\n        <DiagramComponent\r\n          id='diagram'\r\n          ref={diagram => (diagramInstance = diagram)}\r\n          width={'100%'}\r\n          height={'600px'}\r\n          snapSettings={{ constraints: SnapConstraints.None }}\r\n          dataSourceSettings={{\r\n            id: 'Name',\r\n            //set an URL to perform CRUD operations with node in database\r\n            crudAction: {\r\n              read: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/GetNodes',\r\n              create: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/AddNodes',\r\n              update: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/UpdateNodes',\r\n              destroy: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/DeleteNodes',\r\n              customFields: ['Id', 'Description', 'Color']\r\n            },\r\n            connectionDataSource: {\r\n              id: 'Name',\r\n              sourceID: 'SourceNode',\r\n              targetID: 'TargetNode',\r\n              //set an URL to perform CRUD operations with connector in database\r\n              crudAction: {\r\n                read: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/GetConnectors',\r\n                create: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/AddConnectors',\r\n                update: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/UpdateConnectors',\r\n                destroy: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/DeleteConnectors',\r\n                customFields: ['Id']\r\n              }\r\n            }\r\n          }}\r\n          layout={{\r\n            type: 'HierarchicalTree',\r\n            verticalSpacing: 40,\r\n          }}\r\n          getNodeDefaults={(obj: Node) => {\r\n            obj.width = 100;\r\n            obj.height = 50;\r\n            obj.shape = { type: 'Basic', shape: 'Rectangle' };\r\n            obj.style = { strokeWidth: 1, strokeColor: '#DDDDDD' };\r\n            return obj;\r\n          }}\r\n          getConnectorDefaults={(connector: Connector) => {\r\n            connector.type = 'Orthogonal';\r\n            connector.style.fill = '#707070';\r\n            connector.style.strokeColor = '#707070';\r\n            connector.targetDecorator = {\r\n              style: {\r\n              strokeColor: '#707070',\r\n              fill: '#707070'\r\n              },\r\n            };\r\n             return connector;\r\n          }}\r\n          selectionChange={(args: ISelectionChangeEventArgs) => {\r\n            if (args.state === 'Changing') {\r\n              if (args.newValue.length > 0) {\r\n                if (args.newValue[0] instanceof Node) {\r\n                  enableToolbarItems(true);\r\n                } else {\r\n                  toolbarObj.enableItems(document.getElementById(toolbarObj.items[0].id).parentElement,false);\r\n                  toolbarObj.enableItems(document.getElementById(toolbarObj.items[2].id).parentElement,true);\r\n                  toolbarObj.enableItems(document.getElementById(toolbarObj.items[4].id).parentElement,false);\r\n                }\r\n              } else {\r\n                enableToolbarItems(false);\r\n              }\r\n            }\r\n          }}\r\n          sourcePointChange={(args: IEndChangeEventArgs) => {\r\n            if (args.state === 'Completed') {\r\n              if (!args.connector.targetID || !args.connector.sourceID) {\r\n                args.cancel = true;\r\n              }\r\n            }\r\n          }}\r\n          targetPointChange={(args: IEndChangeEventArgs) => {\r\n            if (args.state === 'Completed') {\r\n              if (!args.connector.targetID || !args.connector.sourceID) {\r\n                args.cancel = true;\r\n              }\r\n            }\r\n          }}\r\n          setNodeTemplate={(obj: NodeModel) => {\r\n            obj.annotations = [{ style: { color: 'black' } }];\r\n            obj.annotations[0].content = (obj as DataInfo).Description;\r\n            obj.style = { fill: (obj as DataInfo).Color };\r\n            if ((obj as DataInfo).Id === 1) {\r\n              //delete constraints for an root node\r\n              obj.constraints = NodeConstraints.Default & ~NodeConstraints.Delete;\r\n            }\r\n          }}\r\n        >\r\n           <Inject\r\n                services={[DataBinding, HierarchicalTree]}\r\n              />\r\n              </DiagramComponent>\r\n         </div>\r\n    </div>\r\n</div>\r\n\r\n        <DialogComponent\r\n          id='editDialog'\r\n          ref={dialog => (dialogInstance = dialog)}\r\n          width={'300px'}\r\n          visible={false}\r\n          isModal={true}\r\n          showCloseIcon={true}\r\n          content={this.content as any}\r\n          buttons={this.buttons}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// custom code start\r\nfunction enableToolbarItems(isEnableItem: boolean): void {\r\n  toolbarObj.enableItems(document.getElementById(toolbarObj.items[0].id).parentElement,isEnableItem);\r\n  toolbarObj.enableItems(document.getElementById(toolbarObj.items[2].id).parentElement,isEnableItem);\r\n  toolbarObj.enableItems(document.getElementById(toolbarObj.items[4].id).parentElement,isEnableItem);\r\n}\r\n\r\nfunction openDialog( title: string, description: string, color: string, isNode: boolean) {\r\n  dialogInstance.header = title;\r\n  if (isNode) {\r\n    hideClassElement('.showDropdown', 'none');\r\n    hideClassElement('.showLabel', 'block');\r\n    (document.getElementById('Description') as HTMLInputElement).value = description;\r\n    (document.getElementById('Color') as HTMLInputElement).value = color;\r\n  } else {\r\n    hideClassElement('.showDropdown', 'block');\r\n    hideClassElement('.showLabel', 'none');\r\n    (document.getElementById('SourceId') as HTMLInputElement).value = description;\r\n    (document.getElementById('TargetId') as HTMLInputElement).value = color;\r\n  }\r\n  dialogInstance.show();\r\n}\r\n\r\nfunction hideClassElement(className: string, display: string): void {\r\n  let i;\r\n  let showDropdown: NodeListOf<HTMLElement> = document.querySelectorAll(className);\r\n  for (i = 0; i < showDropdown.length; i++) {\r\n    showDropdown[i].style.display = display;\r\n  }\r\n}\r\n// custom code end\r\nfunction getDataSource() {\r\n  let i: number;\r\n  nodeData = [];\r\n  for (i = 0; i < diagramInstance.nodes.length; i++) {\r\n      let node: NodeModel = diagramInstance.nodes[i];\r\n      let element: object = { Name: node.id, Label: (node as DataInfo).Description };\r\n      nodeData.push(element as { [key: string]: Object; })\r\n  }\r\n  return nodeData;\r\n}\r\n\nReactDOM.render(<Crud />, document.getElementById('sample'));","app/sample-base.tsx":"import * as ReactDOM from 'react-dom';\r\nimport * as React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { enableRipple } from '@syncfusion/ej2-base';\r\n\r\nenableRipple((window as any).ripple);\r\nexport class SampleBase<P, S> extends React.PureComponent<RouteComponentProps<any> & P, S>{\r\n    public rendereComplete(): void {\r\n        /**custom render complete function */\r\n    }\r\n    componentDidMount(): void {\r\n        setTimeout(() => {\r\n            this.rendereComplete();\r\n        }\r\n        );\r\n    }\r\n}"}