{"index.css":"","systemjs.config.js":"System.config({\r\n    transpiler: \"ts\",\r\n    typescriptOptions: {\r\n            target: \"es5\",\r\n            module: \"commonjs\",\r\n            moduleResolution: \"node\",\r\n            emitDecoratorMetadata: true,\r\n            experimentalDecorators: true,\r\n            \"jsx\": \"react\"\r\n    },\r\n     meta: {\r\n      'typescript': {\r\n        \"exports\": \"ts\"\r\n      },\r\n      '*.json': { loader: 'plugin-json' }\r\n    },\r\n    paths: {\r\n        \"syncfusion:\": \"http://cdn.syncfusion.com/ej2/\"},\r\n    map: {\r\n        app: 'app',\r\n        ts: \"https://unpkg.com/plugin-typescript@4.0.10/lib/plugin.js\",\r\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\r\n        \"plugin-json\":\"https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js\",\r\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\r\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\r\n        \"@syncfusion/ej2-splitbuttons\": \"syncfusion:ej2-splitbuttons/dist/ej2-splitbuttons.umd.min.js\",\r\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\r\n        \"@syncfusion/ej2-maps\": \"syncfusion:ej2-maps/dist/ej2-maps.umd.min.js\",\r\n        \"@syncfusion/ej2-treemap\": \"syncfusion:ej2-treemap/dist/ej2-treemap.umd.min.js\",\r\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\r\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\r\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\r\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",\r\n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\r\n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",\r\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",\r\n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\r\n        \"@syncfusion/ej2-schedule\": \"syncfusion:ej2-schedule/dist/ej2-schedule.umd.min.js\",\r\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",        \r\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\r\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",        \r\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\",\r\n        \"@syncfusion/ej2-documenteditor\": \"syncfusion:ej2-documenteditor/dist/ej2-documenteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-notifications\": \"syncfusion:ej2-notifications/dist/ej2-notifications.umd.min.js\",\r\n        \"@syncfusion/ej2-richtexteditor\": \"syncfusion:ej2-richtexteditor/dist/ej2-richtexteditor.umd.min.js\",\r\n\t\t\"@syncfusion/ej2-svg-base\": \"syncfusion:ej2-svg-base/dist/ej2-svg-base.umd.min.js\",\r\n        \"@syncfusion/ej2-pivotview\": \"syncfusion:ej2-pivotview/dist/ej2-pivotview.umd.min.js\",\r\n        \"@syncfusion/ej2-heatmap\": \"syncfusion:ej2-heatmap/dist/ej2-heatmap.umd.min.js\",\r\n        \"@syncfusion/ej2-spreadsheet\": \"syncfusion:ej2-spreadsheet/dist/ej2-spreadsheet.umd.min.js\",\r\n        \"@syncfusion/ej2-react-base\": \"syncfusion:ej2-react-base/dist/ej2-react-base.umd.min.js\",\r\n        \"@syncfusion/ej2-react-buttons\": \"syncfusion:ej2-react-buttons/dist/ej2-react-buttons.umd.min.js\",\r\n        \"@syncfusion/ej2-react-splitbuttons\": \"syncfusion:ej2-react-splitbuttons/dist/ej2-react-splitbuttons.umd.min.js\",\r\n        \"@syncfusion/ej2-react-charts\": \"syncfusion:ej2-react-charts/dist/ej2-react-charts.umd.min.js\",\r\n        \"@syncfusion/ej2-react-maps\": \"syncfusion:ej2-react-maps/dist/ej2-react-maps.umd.min.js\",\r\n        \"@syncfusion/ej2-react-treemap\": \"syncfusion:ej2-react-treemap/dist/ej2-react-treemap.umd.min.js\",\r\n        \"@syncfusion/ej2-react-circulargauge\": \"syncfusion:ej2-react-circulargauge/dist/ej2-react-circulargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-react-lineargauge\": \"syncfusion:ej2-react-lineargauge/dist/ej2-react-lineargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-react-calendars\": \"syncfusion:ej2-react-calendars/dist/ej2-react-calendars.umd.min.js\",\r\n        \"@syncfusion/ej2-react-dropdowns\": \"syncfusion:ej2-react-dropdowns/dist/ej2-react-dropdowns.umd.min.js\",\r\n        \"@syncfusion/ej2-react-grids\": \"syncfusion:ej2-react-grids/dist/ej2-react-grids.umd.min.js\",\r\n        \"@syncfusion/ej2-react-inputs\": \"syncfusion:ej2-react-inputs/dist/ej2-react-inputs.umd.min.js\",\r\n        \"@syncfusion/ej2-react-lists\": \"syncfusion:ej2-react-lists/dist/ej2-react-lists.umd.min.js\",\r\n        \"@syncfusion/ej2-react-navigations\": \"syncfusion:ej2-react-navigations/dist/ej2-react-navigations.umd.min.js\",\r\n        \"@syncfusion/ej2-react-popups\": \"syncfusion:ej2-react-popups/dist/ej2-react-popups.umd.min.js\",\r\n        \"@syncfusion/ej2-react-schedule\": \"syncfusion:ej2-react-schedule/dist/ej2-react-schedule.umd.min.js\",\r\n        \"@syncfusion/ej2-react-documenteditor\": \"syncfusion:ej2-react-documenteditor/dist/ej2-react-documenteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-react-notifications\": \"syncfusion:ej2-react-notifications/dist/ej2-react-notifications.umd.min.js\",\r\n        \"@syncfusion/ej2-react-richtexteditor\": \"syncfusion:ej2-react-richtexteditor/dist/ej2-react-richtexteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-react-pivotview\": \"syncfusion:ej2-react-pivotview/dist/ej2-react-pivotview.umd.min.js\",\r\n        \"@syncfusion/ej2-react-heatmap\": \"syncfusion:ej2-react-heatmap/dist/ej2-react-heatmap.umd.min.js\",\r\n        \"@syncfusion/ej2-react-spreadsheet\": \"syncfusion:ej2-react-spreadsheet/dist/ej2-react-spreadsheet.umd.min.js\",\r\n        \"react-dom\":\"https://unpkg.com/react-dom@15.5.4/dist/react-dom.min.js\",\r\n        \"react\":\"https://unpkg.com/react@15.5.4/dist/react.min.js\",\r\n    },\r\n    packages: {\r\n        'app': { main: 'index', defaultExtension: 'tsx' },\r\n    }\r\n});\r\n\r\nSystem.import('app');","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>{{:title}}</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <meta name=\"description\" content=\"{{:meta}}\">    \r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <link rel=\"shortcut icon\" href=\"https://ej2.syncfusion.com/home/favicon.ico\" />\r\n    <script type=\"text/javascript\">\r\n        var themeName = location.hash || 'material';\r\n        themeName = themeName.replace('#','');\r\n        window.ripple = (themeName === \"material\")\r\n        document.write('<link href=\"http://cdn.syncfusion.com/ej2/' + themeName + '.css\" rel=\"stylesheet\">');\r\n    </script>\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n    <link rel=\"canonical\" href=\"https://ej2.syncfusion.com/react/demos/{{:canonical}}\"/>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\r\n    <link href=\"index.css\" rel=\"stylesheet\" />\r\n     <style>\r\n        #loader {\r\n            color: #008cff;\r\n            height: 40px;\r\n            left: 45%;\r\n            position: absolute;\r\n            top: 45%;\r\n            width: 30%;\r\n        }\r\n        body {\r\n            touch-action:none;\r\n        }\r\n        .body {\r\n            font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n        }\r\n\r\n        .e-view {\r\n            bottom: 0;\r\n            left: 0;\r\n            overflow: hidden;\r\n            position: absolute;\r\n            right: 0;\r\n            top: 0;\r\n        }\r\n\r\n        .sb-left {\r\n            float: left;\r\n        }\r\n\r\n        .sb-right {\r\n            float: right;\r\n        }\r\n\r\n        .sb-block {\r\n            display: block;\r\n        }\r\n\r\n        .sb-table {\r\n            display: table;\r\n        }\r\n\r\n        .sb-table-cell {\r\n            display: table-cell;\r\n            vertical-align: middle;\r\n        }\r\n\r\n        /*sample header*/\r\n\r\n\r\n        .sb-header {\r\n            height: 48px;\r\n            background: #FFFFFF;\r\n            box-shadow: 0 2px 4px 0 rgba(0,0,0,0.12);\r\n            z-index: 1001;\r\n            opacity: 100;\r\n        }\r\n\r\n\r\n        .sb-header-left, .sb-header-right {\r\n            height: 100%;\r\n        }\r\n\r\n        #sb-header-text {\r\n            padding-left: 22px;\r\n            opacity: 0.87;\r\n            font-family: Roboto;\r\n            font-weight: 500;\r\n            font-size: 15px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n        .header-logo {\r\n            float: left;\r\n            padding-left: 8px;\r\n            padding-right: 22px;\r\n        }\r\n\r\n        .footer-logo {\r\n            background: url(https://ej2.syncfusion.com/home/images/footer-logo.svg) no-repeat right;\r\n            height: 40px;\r\n            width: 140px;\r\n        }\r\n\r\n        .sb-header-splitter {\r\n            float: left;\r\n            border-left: 1px solid rgb(196, 196, 196);\r\n            height: 32px;\r\n            margin-top: 8px;\r\n            padding-left: 22 px;\r\n        }\r\n\r\n        .sb-header-settings {\r\n            display: none;\r\n        }\r\n\r\n        .product-style a{\r\n        padding-right: 15px;\r\n        font-family:Roboto;\r\n        font-weight: 500;\r\n        font-size: 13px;\r\n        color: #363636;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        }\r\n        .product-style a:hover {\r\n            color:#3C78EF;\r\n        }\r\n\r\n        .sb-download-btn a {\r\n            text-decoration: none;\r\n        }\r\n\r\n        .sb-download-text {\r\n            color: #FFFFFF;\r\n        }\r\n\r\n        .sb-download-wrapper {\r\n            padding-right: 27px;\r\n        }\r\n\r\n        .sb-download-btn:hover .sb-download-btn:focus .sb-download-btn.active {\r\n            border-radius: 2px;\r\n            font-family: \"Roboto\";\r\n            font-weight: bold;\r\n            color: #FFFFFF;\r\n        }\r\n\r\n        .sb-download-btn:hover {\r\n            background: #006CE6;\r\n        }\r\n\r\n        .sb-download-btn:focus {\r\n            background: #0051CB;\r\n        }\r\n\r\n        .sb-download-btn.active {\r\n            background: #0036B1;\r\n        }\r\n\r\n        .sb-download-btn {\r\n            background-color: #3C78EF;\r\n            opacity: 100;\r\n            border-radius: 2px;\r\n            font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n            font-weight: 500;\r\n            line-height: 18px;\r\n            height: 32px;\r\n            border-color: transparent;\r\n        }\r\n\r\n        .sb-bread-crumb  h1{\r\n            padding-left: 20px;\r\n            padding-top: 24px;\r\n            padding-bottom: 10px;\r\n            margin: 0;\r\n        }\r\n\r\n        .category-allcontrols a, .category-text a, .crumb-sample {\r\n            display: table;\r\n            opacity: 0.87;\r\n            font-family: Roboto;\r\n            font-weight: 500;\r\n            font-size: 15px;\r\n            color: #3C78EF;\r\n            text-align: left;\r\n            text-decoration: none;\r\n        }\r\n\r\n        .sb-bread-crumb .sb-bread-crumb-text>div {\r\n            font-size: 15px;\r\n            font-weight: 500;\r\n            padding-right: 8px;\r\n            cursor: default;\r\n            display: table-cell;\r\n        }\r\n\r\n        .sb-bread-crumb-text>div.seperator {\r\n            font-weight: 700;\r\n            font-size: 15px;\r\n            vertical-align: bottom;\r\n        } \r\n\r\n        .content {\r\n        overflow: auto;\r\n        height: calc(100% - 50px);\r\n        top: 50px;\r\n        }\r\n\r\n\r\n        .sample-content {\r\n            top: 48px;\r\n            background: #FFFFFF;\r\n        }\r\n\r\n        .div {\r\n        display: block;\r\n        }\r\n\r\n        .control-section {\r\n            padding-left: 4px;\r\n        }\r\n\r\n        .crumb-sample {\r\n            color: #000000;\r\n            line-height: 18px;\r\n        }\r\n\r\n        #description {\r\n            padding-bottom: 16px;\r\n            padding-left: 20px;\r\n            opacity: 0.75;\r\n            font-family: Roboto;\r\n            font-size: 13px;\r\n            color: #000000;\r\n            text-align: left;\r\n            padding-top: 14px;\r\n        }\r\n\r\n        #action-description {\r\n            padding-left: 20px;\r\n            padding-bottom: 15px;\r\n            font-family: Roboto;\r\n            font-size: 13px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n        #description-section {\r\n            padding-left: 20px;\r\n            padding-top: 30px;\r\n            opacity: 0.87;\r\n            font-family:Roboto;\r\n            font-weight: 700;\r\n            font-size: 15px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n        .layout {\r\n            display:inline-block;\r\n            cursor: pointer;\r\n        }\r\n        #actionDes {\r\n            opacity: 0.75;\r\n        }\r\n/*sb-icons declaration*/\r\n\r\n@font-face {\r\n    font-family: 'sbicons';\r\n      src: url(data:font/truetype;charset=utf-8;base64,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) format('truetype');\r\n    font-weight: normal;\r\n    font-style: normal;\r\n}\r\n\r\n.sb-icons {\r\n    font-family: 'sbicons';\r\n    speak: none;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-variant: normal;\r\n    text-transform: none;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n.sb-icon-Next:before {\r\n    content: '\\e91b';\r\n}\r\n\r\n.sb-icon-Previous:before {\r\n    content: '\\e91f';\r\n}\r\n\r\n#next-sample,\r\n#prev-sample {\r\n    font-size: 18px;\r\n    border: 0.5px solid#E5E5E5;\r\n    background: #FFFFFF;\r\n    display: inline-table;\r\n    padding: 2px 5px 0px 5px;\r\n}\r\n\r\n.sb-navigation-next a, .sb-navigation-prev a{\r\n    color: #636363;\r\n    text-decoration: none;\r\n}\r\n\r\n#prev-sample {\r\n    border-radius: 4px 0px 0px 4px;\r\n}\r\n\r\n#next-sample {\r\n    border-radius: 0px 4px 4px 0px;\r\n    float: right;\r\n}\r\n\r\n#next-sample:hover,\r\n#prev-sample:hover{\r\nbackground-color: #D8D8D8;\r\ntext-decoration: none; \r\n}\r\n\r\n.sb-sample-navigation {\r\n    font-size: 18px;\r\n    color: #5a5a5a;\r\n    cursor: pointer;\r\n}\r\n\r\n.sb-custom-item {\r\n    padding-right: 15px;\r\n    padding-left: 30px;\r\n    display: inline-table;\r\n    padding-top: 20px;\r\n}\r\n\r\na.e-disabled {\r\n    cursor: not-allowed;\r\n    opacity: 0.35;\r\n}\r\n\r\n\r\n@media (max-width: 550px) {\r\n        \r\n        .sb-headers {\r\n            height: 48px;\r\n            background: #FFFFFF;\r\n            box-shadow: 0 2px 4px 0 rgba(0,0,0,0.12);\r\n            z-index: 1001;\r\n            opacity: 100;\r\n        }\r\n        .sb-header {\r\n            display: none;\r\n        }\r\n        .syncfusion-logo {\r\n            float: left;\r\n            padding-left: 8px;\r\n            padding-right: 8px;\r\n        }\r\n        .sync-logo {\r\n            padding-right: 0px;\r\n            padding-left: 8px;\r\n            background: url(../../styles/images/SyncfusionLogo.svg) no-repeat right;\r\n            height: 40px;\r\n            width: 40px;\r\n        }\r\n        .sb-icon-notification {\r\n            padding-left: 15px;\r\n            padding-right: 15px;\r\n            font-size: 18px;\r\n            transform: rotate(-180deg);\r\n            color: #5D5D5D;\r\n            opacity: 100%;\r\n        }\r\n        #sb-header-text {\r\n            padding-left: 0%;\r\n        }\r\n    \r\n        .sb-icon-notification:before {\r\n            content: \"\\ea08\";\r\n        }\r\n    \r\n        .product a:hover{\r\n        color: #5D5D5D;\r\n        text-decoration: none;\r\n    }\r\n}\r\n\r\n    </style>\r\n</head>\r\n\r\n<body class='e-view ej2-new' aria-busy=\"true\">\r\n        <div class=\"sample-browser\">\r\n            <div id='sample-header' class=\"sb-header\" role=\"banner\">\r\n                <div class='sb-header-left sb-left sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"header-logo\">\r\n                            <a href=\"https://ej2.syncfusion.com/home/react.html\" target=\"\" rel=\"noopener noreferrer\">\r\n                                <div class=\"footer-logo\"> </div>\r\n                            </a>\r\n                        </div>\r\n    \r\n                    </div>\r\n                    <div class=\"sb-header-splitter sb-download-splitter\"></div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div id='sb-header-text' class='e-sb-header-text'>\r\n    \r\n                            <span class='sb-header-text-left'>Essential JS 2 for React</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class='sb-header-right sb-right sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class='product-style'>\r\n                            <div><a href=\"https://www.syncfusion.com/react-ui-components/{{:header2}}\">PRODUCT TOUR</a></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"sb-header-item sb-table-cell sb-download-wrapper\">\r\n                            <a href=\"https://www.syncfusion.com/downloads/react\" target=\"_blank\">\r\n                                <button id=\"download-now\" class=\"sb-download-btn\">\r\n                                    <span class=\"sb-download-text\">DOWNLOAD</span>\r\n                                </button>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    \r\n            </div>\r\n            <div id='sample-header' class=\"sb-headers\" role=\"banner\">\r\n                <div class='sb-header-left sb-left sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"syncfusion-logo\">\r\n                            <a href=\"https://ej2.syncfusion.com/home/react.html\" target=\"\" rel=\"noopener noreferrer\">\r\n                                <div class=\"sync-logo\"></div>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div id='sb-header-text' class='e-sb-header-text'>\r\n                            <span class='sb-header-text-left'>Essential JS 2 for React</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                    <div class='sb-header-right sb-right sb-table'>\r\n                        <div class='sb-header-item sb-table-cell'>\r\n                            <div class=\"product\">\r\n                                <a href=\"https://www.syncfusion.com/react-ui-components/{{:header2}}\">\r\n                                <div class=\"sb-icon-notification sb-icons\"></div>\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n    \r\n            <div class ='content e-view'>\r\n            <div class='sample-content'>\r\n                <div id=\"sample-bread-crumb\" class=\"sb-bread-crumb\">\r\n                            <div class=\"sb-custom-item sb-sample-navigation sb-right sb-header-right sb-table-cell\">\r\n                                <div id=\"prev-sample\" class=\"sb-navigation-prev e-control e-tooltip \" aria-label=\"previous sample\" title=\"Previous Sample\">\r\n                                    <a {{:anchor-prev}} class='{{:disabled-prev}}'><span class=\"sb-icons sb-icon-Previous\"></span></a>\r\n                            \r\n                                </div>\r\n                                <div id=\"next-sample\" class=\"sb-navigation-next e-control e-tooltip\" aria-label=\"next sample\" title=\"Next Sample\">\r\n                                    <a {{:anchor-next}} class='{{:disabled-next}}'><span class=\"sb-icons sb-icon-Next\"></span></a>\r\n                            \r\n                                </div>\r\n                            </div>\r\n                    <h1 class=\"sb-bread-crumb-text\">\r\n                        <div class=\"category-allcontrols\"><a href=\"https://ej2.syncfusion.com/react/demos/\"><span>All Controls</span></a></div>\r\n                        <div class=\"category-seperator sb-icons\"> / </div>\r\n                        <div class=\"category-text bread-ctext\"><a href=\"https://ej2.syncfusion.com/react/demos/#/material/{{:header2}}/default.html\"><span>{{:header}}</span></a></div>\r\n                        <div class=\"category-seperator sb-icons\"> / </div>\r\n                        <div class=\"crumb-sample\">{{:header1}}</div>\r\n                    </h1>\r\n                </div>\r\n                <div class=\"control-content\">\r\n                <div id=\"action-description\">\r\n                        <p>\r\n                            <div class=\"layout\" id=\"actionDes\">{{:action-description}}</div>\r\n                            <a id=\"details\" class=\"layout\" onclick=\"desDetails()\"> More Details...</a>\r\n                            <script>\r\n                                function desDetails() {\r\n                                    var element = document.getElementById('description-section');\r\n                                    if (element) {\r\n                                        element.scrollIntoView();\r\n                                    }\r\n                                }\r\n                            </script>\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"container-fluid\">\r\n                        <div class=\"control-section\">\r\n                            <div id='sample'>\r\n                                <div id='loader'>Loading....</div>\r\n                            </div>\r\n                    \r\n                        </div>\r\n                    </div>\r\n                    <div id=\"description-section\">Description</div>    \r\n                    <div id=\"description\">\r\n                        <p>\r\n                           {{:description}}\r\n                         </p>     \r\n                    </div>    \r\n                </div>             \r\n            </div>\r\n                \r\n            </div>\r\n        </div>\r\n        <script src=\"./app/index.min.js\"></script>\r\n        <script src=\"../../{{:repoScript}}\"></script> \r\n\r\n</body>\r\n</html>\r\n","app/index.tsx":"import * as ReactDOM from \"react-dom\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Node,\r\n  Canvas,\r\n  PathElement,\r\n  HorizontalAlignment,\r\n  DiagramElement,\r\n  TextElement,\r\n  PortVisibility,\r\n  HierarchicalTree,\r\n  DataBinding,\r\n  DiagramComponent,\r\n  Diagram,\r\n  NodeModel,\r\n  ConnectorModel,\r\n  Connector,\r\n  SnapConstraints,\r\n  DecoratorModel,\r\n  Inject,\r\n  DiagramTools,\r\n  Direction,\r\n  Segments,\r\n  PathAnnotationModel,\r\n  OrthogonalSegmentModel,\r\n  PointPortModel,\r\n  ShapeAnnotationModel,\r\n  ISelectionChangeEventArgs\r\n} from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nimport { DataManager } from \"@syncfusion/ej2-data\";\r\nimport { Point } from \"@syncfusion/ej2-diagrams/src/diagram/primitives/point\";\r\nimport { ChangeEventArgs, NumericTextBoxComponent } from \"@syncfusion/ej2-react-inputs\";\r\nimport { DropDownListComponent } from \"@syncfusion/ej2-react-dropdowns\";\r\nimport { RadioButtonComponent, ChangeArgs } from \"@syncfusion/ej2-react-buttons\";\r\n\r\n\r\nlet nodes: NodeModel[] = [];\r\nlet port1: PointPortModel = { id: 'port1', offset: { x: 0.5, y: 1 } };\r\nlet port: PointPortModel = { id: 'port', offset: { x: 1, y: 0.5 } };\r\nnodes.push(CreateNodes('node1', 100, 125, 'Terminator', 'Begin', 100, 35));\r\nnodes.push(CreateNodes('node2', 300, 125, 'Process', 'Specify collection', 120, 25, [port]));\r\nnodes.push(CreateNodes('node3', 500, 125, 'Decision', 'Particulars \\n required?', 100, 50, [port1]));\r\nnodes.push(CreateNodes('node4', 730, 125, 'Process', 'Specify particulars', 90, 25));\r\nnodes.push(CreateNodes('node5', 500, 225, 'Process', 'Design collection', 100, 25, [port]));\r\nnodes.push(CreateNodes('node6', 500, 320, 'Process', 'Cluster of events', 100, 25));\r\nnodes.push(CreateNodes('node7', 500, 420, 'Process', 'Start the process', 100, 25));\r\nnodes.push(CreateNodes('node8', 730, 320, 'Process', 'Record and analyze \\n results', 170, 25, [port]));\r\nnodes.push(CreateNodes('node9', 730, 420, 'Terminator', 'End ', 100, 35));\r\n\r\nlet connectors: ConnectorModel[] = [];\r\nconnectors.push(CreateConnector('connector1', 'node1', 'node2', ''));\r\nconnectors.push(CreateConnector('connector2', 'node2', 'node3', ''));\r\nconnectors.push(CreateConnector('connector3', 'node3', 'node4', 'Yes'));\r\nconnectors.push(CreateConnector('connector4', 'node3', 'node5', 'No'));\r\nconnectors.push(CreateConnector('connector5', 'node5', 'node6', ''));\r\nconnectors.push(CreateConnector('connector6', 'node6', 'node7', ''));\r\nconnectors.push(CreateConnector('connector7', 'node8', 'node6', ''));\r\nconnectors.push(CreateConnector('connector8', 'node7', 'node9', ''));\r\nconnectors.push(CreateConnector('connector10', 'node4', 'node5', '', 'Orthogonal', 'Bottom', 'port', 220));\r\n\r\nlet SAMPLE_CSS = `\r\n#flowExecitionPropertySection .row {\r\n            margin-left: 0px;\r\n            margin-right: 0px;\r\n        }\r\n\r\n        #flowExecitionPropertySection .col-xs-7 {\r\n            width: 300px;\r\n        }\r\n\r\n        #flowExecitionPropertySection .col-xs-7 {\r\n            padding-left: 0px;\r\n            padding-right: 0px;\r\n        }\r\n\r\n        #flowExecitionControlSection.content-wrapper {\r\n            border: 1px solid #D7D7D7;\r\n        }\r\n`;\r\n\r\nlet diagramInstance: DiagramComponent;\r\n\r\nexport class FlowExecution extends SampleBase<{}, {}> {\r\n  renderComplete() {   \r\n    diagramInstance.select([diagramInstance.nodes[2]]);\r\n    \r\n    diagramInstance.selectionChange = (arg: ISelectionChangeEventArgs) => {\r\n      applyChanges(selectedButton);\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"control-pane1\">\r\n        <div className=\"col-lg-8 control-section\">\r\n          <style>{SAMPLE_CSS}</style>\r\n          <div id=\"flowExecitionControlSection\" className=\"content-wrapper\" style={{ width: \"100%\" }}>\r\n            <DiagramComponent\r\n              id=\"diagram\"\r\n              ref={diagram => (diagramInstance = diagram)}\r\n              width={\"100%\"}\r\n              height={\"600px\"}\r\n              nodes={nodes}\r\n              snapSettings={{ constraints: SnapConstraints.None }}\r\n              connectors={connectors}\r\n              created={(args) => {\r\n                diagramInstance.select([diagramInstance.nodes[2]]);\r\n              }}\r\n              selectionChange={(args: ISelectionChangeEventArgs) => {\r\n                applyChanges(selectedButton);\r\n            }}\r\n\r\n            >\r\n              <Inject services={[DataBinding]} />\r\n            </DiagramComponent>\r\n          </div>\r\n        </div>\r\n        <div id=\"flowExecitionPropertySection\" className=\"col-lg-4 property-section\">\r\n          <div className=\"property-panel-header\"> Choose a flow</div>\r\n          <div className=\"row property-panel-content\" id=\"appearance\" >\r\n            <div className=\"row property-panel-content\">\r\n              <div className=\"row\">\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent\r\n                    id=\"UnhighlightAll\"\r\n                    name='radio'\r\n                    value='UnhighlightAll'\r\n                    label='None'\r\n                    change={(args: ChangeArgs) => {\r\n                      buttonChange(args);\r\n                    }}                   \r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent\r\n                    id=\"LinksInto\"\r\n                    name='radio'\r\n                    value='LinksInto'\r\n                    label='Incoming connections'\r\n                    change={(args: ChangeArgs) => {\r\n                      buttonChange(args);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent\r\n                    id=\"LinksOutOf\"\r\n                    name='radio'\r\n                    value='LinksOutOf'\r\n                    label='Outgoing connections'\r\n                    change={(args: ChangeArgs) => {\r\n                      buttonChange(args);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent\r\n                    id=\"LinksConnected\"\r\n                    name='radio'\r\n                    value='LinksConnected'\r\n                    label='Incoming and outgoing connections'\r\n                    change={(args: ChangeArgs) => {\r\n                      buttonChange(args);\r\n                    }}\r\n                    checked={true}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent\r\n                    id=\"NodesInto\"\r\n                    name='radio'\r\n                    value='NodesInto'\r\n                    label='Incoming nodes'\r\n                    change={(args: ChangeArgs) => {\r\n                      buttonChange(args);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent\r\n                    id=\"NodesOutOf\"\r\n                    name='radio'\r\n                    value='NodesOutOf'\r\n                    label='Outgoing nodes'\r\n                    change={(args: ChangeArgs) => {\r\n                      buttonChange(args);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent\r\n                    id=\"NodesConnected\"\r\n                    name='radio'\r\n                    value='NodesConnected'\r\n                    label='Incoming and outgoing nodes'\r\n                    change={(args: ChangeArgs) => {\r\n                      buttonChange(args);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"row\" style={{ paddingTop: \"8px\" }}>\r\n                <div className=\"col-xs-7\">\r\n                  <RadioButtonComponent\r\n                    id=\"NodesReachable\"\r\n                    name='radio'\r\n                    value='NodesReachable'\r\n                    label='Adjacent nodes'\r\n                    change={(args: ChangeArgs) => {\r\n                      buttonChange(args);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction CreateConnector(\r\n  name: string, source: string, target: string, content: string, type?: Segments,\r\n  direction?: Direction, targePort?: string, length?: number): ConnectorModel {\r\n  let connector: ConnectorModel = {};\r\n  connector.id = name;\r\n  connector.sourceID = source;\r\n  connector.targetID = target;\r\n  connector.style = { strokeWidth: 2 };\r\n  let annotation: PathAnnotationModel = {};\r\n  annotation.content = content;\r\n  annotation.style = { fill: 'white' };\r\n  connector.annotations = [annotation];\r\n  connector.style.strokeColor = '#8D8D8D';\r\n  connector.targetDecorator = {};\r\n  connector.targetDecorator.style = {};\r\n  connector.targetDecorator.style.strokeColor = '#8D8D8D';\r\n  connector.targetDecorator.style.fill = '#8D8D8D';\r\n  if (targePort) {\r\n    connector.targetPortID = targePort;\r\n  }\r\n  let segment: OrthogonalSegmentModel = {};\r\n  if (type) {\r\n    connector.type = type;\r\n    segment.direction = direction;\r\n    segment.type = type;\r\n    segment.length = length;\r\n    connector.segments = [segment];\r\n  }\r\n  return connector;\r\n}\r\n\r\nfunction CreateNodes(\r\n  name: string, offsetX: number, offsetY: number, shape: string, content: string,\r\n  width: number, height: number, ports?: PointPortModel[]): NodeModel {\r\n  let node: NodeModel = {};\r\n  node.id = name;\r\n  node.offsetX = offsetX;\r\n  node.width = 150;\r\n  node.height = 50;\r\n  node.offsetY = offsetY;\r\n  let annotations: ShapeAnnotationModel = {};\r\n  annotations.content = content;\r\n  node.annotations = [annotations];\r\n  node.shape = { type: 'Flow', shape: shape };\r\n  node.style = { fill: '#FBF6E1', strokeColor: '#E8DFB6', strokeWidth: 2 };\r\n  if (ports) {\r\n    node.ports = ports;\r\n  }\r\n  return node;\r\n}\r\n\r\nlet highLightedObjects: string[] = [];\r\nlet selectedButton: string = 'LinksConnected';\r\nfunction buttonChange(args: ChangeArgs): void {\r\n  applyChanges(args.event.srcElement.id);\r\n  selectedButton = args.event.srcElement.id;\r\n}\r\n\r\nfunction applyChanges(id: string): void {\r\n  Unhighlight();\r\n  switch (id) {\r\n    case 'LinksInto':\r\n      linkedIn();\r\n      break;\r\n    case 'LinksOutOf':\r\n      LinksOut();\r\n      break;\r\n    case 'LinksConnected':\r\n      LinksConnector();\r\n      break;\r\n    case 'NodesInto':\r\n      NodesIn();\r\n      break;\r\n    case 'NodesOutOf':\r\n      NodesOut();\r\n      break;\r\n    case 'NodesConnected':\r\n      NodesConnect();\r\n      break;\r\n    case 'NodesReachable':\r\n      NodeReachable();\r\n      break;\r\n  }\r\n}\r\n    function linkedIn(): void {\r\n        if (diagramInstance.selectedItems.nodes.length) {\r\n            let node: string[] = (diagramInstance.selectedItems.nodes[0] as Node).inEdges;\r\n            for (let i: number = 0; i < node.length; i++) {\r\n                let index: number = diagramInstance.connectors.indexOf(diagramInstance.nameTable[node[i]]);\r\n                highLightedObjects.push(node[i]);\r\n                diagramInstance.connectors[index].style.strokeColor = '#1413F8';\r\n                diagramInstance.connectors[index].targetDecorator.style.strokeColor = '#1413F8';\r\n                diagramInstance.connectors[index].targetDecorator.style.fill = '#1413F8';\r\n                diagramInstance.dataBind();\r\n            }\r\n        }\r\n    }\r\n\r\n    function LinksOut(): void {\r\n        if (diagramInstance.selectedItems.nodes.length) {\r\n            let node: string[] = (diagramInstance.selectedItems.nodes[0] as Node).outEdges;\r\n            for (let i: number = 0; i < node.length; i++) {\r\n                let index: number = diagramInstance.connectors.indexOf(diagramInstance.nameTable[node[i]]);\r\n                highLightedObjects.push(node[i]);\r\n                diagramInstance.connectors[index].style.strokeColor = '#1413F8';\r\n                diagramInstance.connectors[index].targetDecorator.style.strokeColor = '#1413F8';\r\n                diagramInstance.connectors[index].targetDecorator.style.fill = '#1413F8';\r\n                diagramInstance.dataBind();\r\n            }\r\n        }\r\n    }\r\n\r\n    function LinksConnector(): void {\r\n        LinksOut();\r\n        linkedIn();\r\n    }\r\n\r\n    function NodesIn(): void {\r\n        if (diagramInstance.selectedItems.nodes.length) {\r\n            let node: string[] = (diagramInstance.selectedItems.nodes[0] as Node).inEdges;\r\n            for (let i: number = 0; i < node.length; i++) {\r\n                let nodeId: string = diagramInstance.nameTable[node[i]].sourceID;\r\n                highLightedObjects.push(nodeId);\r\n                let index: number = diagramInstance.nodes.indexOf(diagramInstance.nameTable[nodeId]);\r\n                diagramInstance.nodes[index].style.strokeColor = '#1413F8';\r\n                diagramInstance.dataBind();\r\n            }\r\n        }\r\n    }\r\n\r\n    function NodesOut(): void {\r\n        if (diagramInstance.selectedItems.nodes.length) {\r\n            let node: string[] = (diagramInstance.selectedItems.nodes[0] as Node).outEdges;\r\n            for (let i: number = 0; i < node.length; i++) {\r\n                let nodeId: string = diagramInstance.nameTable[node[i]].targetID;\r\n                highLightedObjects.push(nodeId);\r\n                let index: number = diagramInstance.nodes.indexOf(diagramInstance.nameTable[nodeId]);\r\n                diagramInstance.nodes[index].style.strokeColor = '#1413F8';\r\n                diagramInstance.dataBind();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function NodesConnect(): void {\r\n        NodesOut();\r\n        NodesIn();\r\n    }\r\n\r\n\r\n    function NodeReachable(): void {\r\n        if (diagramInstance.selectedItems.nodes.length) {\r\n            let connectors: string[] = (diagramInstance.selectedItems.nodes[0] as Node).outEdges;\r\n            let nodeList: string[] = foundNode(connectors, []);\r\n            for (let i: number = 0; i < nodeList.length; i++) {\r\n                let index: number = diagramInstance.connectors.indexOf(diagramInstance.nameTable[nodeList[i]]);\r\n                highLightedObjects.push(nodeList[i]);\r\n                diagramInstance.connectors[index].style.strokeColor = '#1413F8';\r\n                diagramInstance.connectors[index].targetDecorator.style.strokeColor = '#1413F8';\r\n                diagramInstance.connectors[index].targetDecorator.style.fill = '#1413F8';\r\n                diagramInstance.dataBind();\r\n            }\r\n        }\r\n    }\r\n\r\n    function foundNode(list: string[], nodeList: string[]): string[] {\r\n        for (let i: number = 0; i < list.length; i++) {\r\n            let connector: ConnectorModel = diagramInstance.nameTable[list[i]];\r\n            if (nodeList.indexOf(connector.id) > -1) {\r\n                break;\r\n            }\r\n            if (!connector.annotations[0] || (connector.annotations[0] && connector.annotations[0].content !== 'No')) {\r\n                nodeList.push(connector.id);\r\n            }\r\n            if (diagramInstance.nameTable[connector.targetID].outEdges.length) {\r\n                if (list.indexOf(connector.targetID) === -1) {\r\n                    foundNode(diagramInstance.nameTable[connector.targetID].outEdges, nodeList);\r\n                }\r\n            }\r\n\r\n        }\r\n        return nodeList;\r\n    }\r\n\r\n    function Unhighlight(): void {\r\n        for (let i: number = highLightedObjects.length - 1; i >= 0; i--) {\r\n            if (diagramInstance.nameTable[highLightedObjects[i]] instanceof Node) {\r\n                let index: number = diagramInstance.nodes.indexOf(diagramInstance.nameTable[highLightedObjects[i]]);\r\n                diagramInstance.nodes[index].style.strokeColor = '#E8DFB6';\r\n                diagramInstance.dataBind();\r\n            } else {\r\n                let index: number = diagramInstance.connectors.indexOf(diagramInstance.nameTable[highLightedObjects[i]]);\r\n                diagramInstance.connectors[index].style.strokeColor = '#8D8D8D';\r\n                diagramInstance.connectors[index].targetDecorator.style.strokeColor = '#8D8D8D';\r\n                diagramInstance.connectors[index].targetDecorator.style.fill = '#8D8D8D';\r\n                diagramInstance.dataBind();\r\n            }\r\n        }\r\n        highLightedObjects = [];\r\n    }\r\n\nReactDOM.render(<FlowExecution />, document.getElementById('sample'));","app/sample-base.tsx":"import * as ReactDOM from 'react-dom';\r\nimport * as React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { enableRipple } from '@syncfusion/ej2-base';\r\n\r\nenableRipple((window as any).ripple);\r\nexport class SampleBase<P, S> extends React.PureComponent<RouteComponentProps<any> & P, S>{\r\n    public rendereComplete(): void {\r\n        /**custom render complete function */\r\n    }\r\n    componentDidMount(): void {\r\n        setTimeout(() => {\r\n            this.rendereComplete();\r\n        }\r\n        );\r\n    }\r\n}"}